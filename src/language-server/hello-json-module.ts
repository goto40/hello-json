import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { HelloJsonGeneratedModule, HelloJsonGeneratedSharedModule } from './generated/module';
import { HelloJsonDefinitionProvider } from './hello-json-definition';
import { HelloJsonCompletionProvider } from './hello-json-completion';
import { HelloJsonValidator, registerValidationChecks } from './hello-json-validator';
import { HelloJsonExternalJsonModel } from "./hello-json-external-model";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type HelloJsonAddedServices = {
    validation: {
        HelloJsonValidator: HelloJsonValidator
    },
    external: {
        HelloJsonExternalJsonModel: HelloJsonExternalJsonModel
    }    
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type HelloJsonServices = LangiumServices & HelloJsonAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const HelloJsonModule: Module<HelloJsonServices, PartialLangiumServices & HelloJsonAddedServices> = {
    validation: {
        HelloJsonValidator: (services) => new HelloJsonValidator(services)
    },
    external: {
        HelloJsonExternalJsonModel: () => new HelloJsonExternalJsonModel()
    },
    lsp: {
        CompletionProvider: (services) => new HelloJsonCompletionProvider(services),
        DefinitionProvider: (services) => new HelloJsonDefinitionProvider(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createHelloJsonServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    HelloJson: HelloJsonServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        HelloJsonGeneratedSharedModule
    );
    const HelloJson = inject(
        createDefaultModule({ shared }),
        HelloJsonGeneratedModule,
        HelloJsonModule
    );
    shared.ServiceRegistry.register(HelloJson);
    registerValidationChecks(HelloJson);
    return { shared, HelloJson };
}
